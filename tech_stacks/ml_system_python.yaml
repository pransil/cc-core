name: "Python ML System"
description: "Machine Learning system with PyTorch, scikit-learn, pandas, and Jupyter integration"
application_types: ["ml_system"]
complexity: "medium"

tech_stack:
  language: "Python"
  ml_frameworks: "PyTorch, scikit-learn"
  deep_learning: "PyTorch"
  traditional_ml: "scikit-learn"
  data_processing: "pandas"
  visualization: "matplotlib, seaborn"
  notebook: "Jupyter"
  model_tracking: "mlflow"
  
dependencies:
  - "torch>=2.0.0"
  - "torchvision>=0.15.0"
  - "scikit-learn>=1.3.0"
  - "pandas>=2.0.0"
  - "numpy>=1.24.0"
  - "matplotlib>=3.7.0"
  - "seaborn>=0.12.0"
  - "jupyter>=1.0.0"
  - "mlflow>=2.5.0"
  - "joblib>=1.3.0"
  - "pydantic>=2.0.0"
  - "click>=8.0.0"
  - "rich>=13.0.0"
  - "tqdm>=4.65.0"

development_setup:
  - "Install Python 3.8+"
  - "Create virtual environment: python -m venv venv"
  - "Activate venv: source venv/bin/activate (Unix) or venv\\Scripts\\activate (Windows)"
  - "Install dependencies: pip install -r requirements.txt"
  - "Install Jupyter extensions: jupyter lab"
  - "Initialize MLflow: mlflow ui (for tracking experiments)"

project_structure:
  - "src/{project_name}/"
  - "  __init__.py"
  - "  data/"
  - "    loader.py"
  - "    preprocessor.py"
  - "  models/"
  - "    __init__.py"
  - "    base_model.py"
  - "  training/"
  - "    trainer.py"
  - "    evaluator.py"
  - "  inference/"
  - "    predictor.py"
  - "  utils/"
  - "    __init__.py"
  - "    metrics.py"
  - "    visualization.py"
  - "notebooks/"
  - "  exploratory_analysis.ipynb"
  - "  model_development.ipynb"
  - "tests/"
  - "mlruns/"
  - "data/"
  - "  raw/"
  - "  processed/"
  - "models/"
  - "requirements.txt"

testing_strategy:
  - "pytest for unit tests"
  - "pytest-cov for coverage reporting"
  - "Model validation tests with test datasets"
  - "Data pipeline tests"
  - "Performance regression tests"
  - "Cross-validation testing"

best_practices:
  - "Use PyTorch for deep learning models and scikit-learn for traditional ML"
  - "Use MLflow for experiment tracking"
  - "Implement data validation and preprocessing pipelines"
  - "Version control datasets and models"
  - "Create reproducible experiments with random seeds"
  - "Implement model evaluation metrics"
  - "Use configuration files for hyperparameters"
  - "Implement data splitting strategies"
  - "Create model deployment interfaces"
  - "Document model performance and limitations"
  - "Implement feature engineering pipelines"
  - "Use PyTorch DataLoader for efficient data loading"
  - "Implement early stopping and learning rate scheduling"

model_lifecycle:
  training: "python -m {project_name}.training.trainer"
  evaluation: "python -m {project_name}.training.evaluator"
  inference: "python -m {project_name}.inference.predictor"
  experiment_tracking: "mlflow ui"